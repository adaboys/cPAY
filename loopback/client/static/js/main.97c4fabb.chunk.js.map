{"version":3,"sources":["utils/fetch.js","App.js","reportWebVitals.js","index.js"],"names":["downloadCb","response","url","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","renderCb","file","type","fileURL","open","downloadExcel","useStyles","makeStyles","theme","formControl","display","flexDirection","marginLeft","spacing","selectEmpty","marginRight","minWidth","marginBottom","App","classes","React","useState","fileType","numberOfReport","downloadOrRender","streamOrFile","excelTemplate","errorText","error","state","setState","style","padding","Typography","variant","gutterBottom","FormControl","className","Select","id","value","onChange","event","target","MenuItem","TextField","label","defaultValue","required","Button","color","onClick","cb","axios","method","params","responseType","then","catch","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.97c4fabb.chunk.js","sourcesContent":["let downloadCb = (response) => {\n  const url = window.URL.createObjectURL(new Blob([response.data]));\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", \"report.pdf\");\n  document.body.appendChild(link);\n  link.click();\n};\nlet renderCb = (response) => {\n  const file = new Blob([response.data], { type: \"application/pdf\" });\n  const fileURL = URL.createObjectURL(file);\n  window.open(fileURL);\n};\nlet downloadExcel = (response) => {\n  const url = window.URL.createObjectURL(new Blob([response.data]));\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", \"report.xlsx\");\n  document.body.appendChild(link);\n  link.click();\n};\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport  {downloadCb, renderCb, downloadExcel}","import \"./App.css\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { TextField, Button, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport {downloadCb, renderCb, downloadExcel} from './utils/fetch';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: theme.spacing(0),\n  },\n  selectEmpty: {\n    marginRight: theme.spacing(2),\n    minWidth: 120,\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const initState = {\n    fileType: \"pdf\",\n    numberOfReport: 1,\n    downloadOrRender: \"render\",\n    streamOrFile: \"stream\",\n    excelTemplate: \"template\",\n    errorText: \"\",\n    error: false\n  };\n  const [state, setState] = React.useState(initState);\n  const [folderName, setFolderName] = React.useState(\"\");\n  const [file, setFile] = useState(null);\n  const onChangeHandler = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n\nconst onclickCreatFolder = (folderName = \"hello\") => {\n  axios({\n    url: \"http://localhost:3000/api/containers\",\n    method: \"POST\",\n    data: { name: folderName },\n  });\n}\n  const onclickUploadFile = () => {\n    const data = new FormData();\n    data.append(\"file\", file);\n    axios({\n      url: \"http://localhost:3000/api/containers/hello/upload\",\n      method: \"POST\",\n      data: data,\n    });\n  };\n\n\n  const folderChange = (event) => {\n    setFolderName(event.target.value);\n  };\n  const fileTypeChange = (event) => {\n    setState({ ...state, fileType: event.target.value });\n  };\n  const numberOfReportChange = (event) => {\n    \n      if (event.target.value < 1) {\n        setState({...state, errorText: 'Must be positive number', error: true });\n      } else {\n        setState({ ...state, numberOfReport: event.target.value, error: false });\n      }\n    \n   \n  };\n  const downloadOrRenderChange = (event) => {\n    setState({ ...state, downloadOrRender: event.target.value });\n  };\n  const streamOrFileChange = (event) => {\n    setState({ ...state, streamOrFile: event.target.value });\n  };\n  const excelTemplateChange = (event) => {\n    setState({ ...state, excelTemplate: event.target.value });\n  };\n  const onClick = () => {\n    let url, cb;\n    \n    switch (state.fileType) {\n      case \"pdf\":\n        state.streamOrFile === \"stream\"\n          ? (url = \"http://localhost:3000/api/Reports/createPdf\")\n          : (url = \"http://localhost:3000/api/Reports/mergePdfs\");\n        state.downloadOrRender === \"download\"\n          ? (cb = downloadCb)\n          : (cb = renderCb);\n        break;\n      case \"excel\":\n        state.excelTemplate === \"noTemplate\"\n          ? (url = \"http://localhost:3000/api/Reports/createExcelWithTitle\")\n          : (url = \"http://localhost:3000/api/Reports/createExcelByTemplate\");\n        cb = downloadExcel;\n        break;\n      default:\n        return;\n    }\n    //call api\n    axios({\n      url: url,\n      method: \"GET\",\n      params: {numberOfReport: state.numberOfReport},\n      responseType: \"blob\", // important\n    })\n      .then((response) => cb(response))\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div style={{ padding: 10 }}>\n   \n      <Typography variant=\"h6\" gutterBottom>\n        Create report\n      </Typography>\n      <FormControl className={classes.formControl}>\n        <Select\n          id=\"demo-simple-select-placeholder-label\"\n          value={state.fileType}\n          onChange={fileTypeChange}\n          className={classes.selectEmpty}\n        >\n          <MenuItem value={\"pdf\"}>Pdf</MenuItem>\n          <MenuItem value={\"excel\"}>Excel</MenuItem>\n        </Select>\n        <TextField\n          label=\"Number of report\"\n          type=\"number\"\n          defaultValue = {1}\n          errorText= {state.errorText}\n          error= {state.error}\n          required\n          onChange={numberOfReportChange}\n          className={classes.selectEmpty}\n        />\n        {state.fileType === \"pdf\" && (\n          <Select\n            id=\"demo-simple-select-placeholder-label\"\n            value={state.streamOrFile}\n            onChange={streamOrFileChange}\n            className={classes.selectEmpty}\n          >\n            <MenuItem value={\"stream\"}>Stream</MenuItem>\n            <MenuItem value={\"file\"}>File</MenuItem>\n          </Select>\n        )}\n\n        {state.fileType === \"pdf\" && (\n          <Select\n            id=\"demo-simple-select-placeholder-label\"\n            className={classes.selectEmpty}\n            value={state.downloadOrRender}\n            onChange={downloadOrRenderChange}\n          >\n            <MenuItem value={\"render\"}>Render</MenuItem>\n            <MenuItem value={\"download\"}>Download</MenuItem>\n          </Select>\n        )}\n\n        {state.fileType === \"excel\" && (\n          <Select\n            value={state.excelTemplate}\n            onChange={excelTemplateChange}\n            id=\"demo-simple-select-placeholder-label\"\n            className={classes.selectEmpty}\n          >\n            <MenuItem value={\"template\"}>Template</MenuItem>\n            <MenuItem value={\"noTemplate\"}>No template</MenuItem>\n          </Select>\n        )}\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.selectEmpty}\n        onClick={onClick}\n      >\n        Create report\n      </Button>\n      {/*comment create folder and upload file*/}\n      {/* \n<hr/>\n      <Typography variant=\"h6\" gutterBottom>\n        Upload template\n      </Typography>\n      <FormControl className={classes.formControl}>\n        <TextField\n          label=\"Folder name\"\n          type=\"text\"\n          onChange={folderChange}\n          className={classes.selectEmpty}\n        />\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.selectEmpty}\n        onClick={()=> onclickCreatFolder(folderName)}\n      >\n        Create folder\n      </Button>\n      <hr/>\n      <FormControl className={classes.formControl}>\n        <TextField\n          type=\"file\"\n          variant=\"outlined\"\n          onChange={onChangeHandler}\n          className={classes.selectEmpty}\n        />\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n       \n        className={classes.selectEmpty}\n        onClick={onclickUploadFile}\n      >\n        Upload template\n      </Button> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}